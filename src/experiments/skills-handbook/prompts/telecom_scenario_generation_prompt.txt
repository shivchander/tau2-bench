# Task: Generate Contrastive Telecom Scenarios for Tool Calling

You are an expert at creating realistic telecom customer service scenarios for testing language models' ability to make correct tool calls.

## Overview

Generate **{num_scenarios} pairs** of scenarios (positive + negative) for testing the **{target_parameter}** parameter of the **{function_name}** function.

Each pair consists of:
1. **Positive Scenario**: Valid telecom customer query that satisfies all policies → Appropriate tool call
2. **Negative Scenario**: Plausible telecom query that violates policies → Agent should refuse

## Input Information

### API Domain
**Telecom** API

### Function Specification
```json
{function_spec}
```

### Policies for this Function
```json
{policies}
```

## Your Task

Generate {num_scenarios} **contrastive scenario pairs** that specifically test the **{target_parameter}** parameter in realistic telecom customer service contexts.

### Positive Scenario Requirements
- Natural telecom customer query (plan changes, adding lines, device upgrades, billing, etc.)
- All parameter values must satisfy telecom policies
- The **{target_parameter}** parameter should be valid and policy-compliant
- Use realistic telecom data:
  - Valid phone numbers (e.g., "+1-555-0123", "555-1234")
  - Proper account IDs and line numbers
  - Real plan names and types (unlimited, family, individual)
  - Valid device models and IMEIs
  - Appropriate service types (voice, data, messaging)
  - Realistic data amounts (GB, minutes, texts)
- Should result in a successful tool call

### Negative Scenario Requirements
- Natural telecom customer query that appears reasonable on the surface
- Violates a policy related to the **{target_parameter}** parameter
- The agent should REFUSE this request and explain why
- Use one of these adversarial strategies:

#### Adversarial Strategy Types:
1. **boundary_violation**: Exceeding limits (e.g., adding 6th line when max is 5, data cap exceeded)
2. **type_violation**: Wrong data type (e.g., text instead of number for data amount)
3. **format_violation**: Invalid format (e.g., bad phone number format, invalid IMEI)
4. **enum_violation**: Invalid value (e.g., "platinum" plan when only "basic"/"premium"/"unlimited" exist)
5. **state_dependency_violation**: Violating state-based rules (e.g., upgrading suspended account, porting number with unpaid bills)
6. **resource_limit_violation**: Exceeding resource limits (e.g., too many devices on plan, data overage)
7. **safety_violation**: Breaking safety constraints (e.g., port-out without verification code)
8. **permission_violation**: Unauthorized action (e.g., non-account-owner adding lines)
9. **multi_parameter_conflict**: Valid individually but invalid combination (e.g., international roaming not available on basic plan)

## Telecom-Specific Scenario Guidelines

### Common Telecom Scenarios to Model:
- **Account management**: Adding/removing lines, changing account holders
- **Plan changes**: Upgrades, downgrades, add-on features
- **Device operations**: Upgrades, trade-ins, unlocking, BYOD
- **Billing issues**: Payment disputes, refunds, plan adjustments
- **Service requests**: Network issues, technical support, feature activation
- **Porting**: Number transfers, carrier switches
- **Cancellations**: Early termination, service suspension

### Realistic Telecom Context:
- Use common phone numbers and area codes
- Include realistic plan names (Unlimited, Family Plan, Pay-As-You-Go)
- Reference device models (iPhone 14, Samsung Galaxy S23)
- Mention typical data amounts (5GB, 10GB, unlimited)
- Use appropriate telecom terminology

### Telecom-Specific Policies to Test:
- **Maximum lines per account** (e.g., 5 lines)
- **Account holder verification** requirements
- **Plan change restrictions** (contract terms, cooling periods)
- **Device unlock policies** (payment completion, time requirements)
- **Port-out authorization** (verification codes, account standing)
- **Data caps and throttling** rules
- **International roaming** eligibility by plan
- **Early termination fees** (ETF)
- **Payment method** requirements

## Output Format

Return a JSON object with this exact structure:

```json
{{
  "scenarios": [
    {{
      "positive": {{
        "user_query": "Natural telecom customer request that satisfies all policies",
        "function_name": "{function_name}",
        "parameters": {{
          "param1": "value1",
          "param2": "value2"
        }},
        "policy_category": "happy_path",
        "rationale": "Why this scenario is policy-compliant and should succeed"
      }},
      "negative": {{
        "user_query": "Natural telecom customer request that violates a policy",
        "function_name": "{function_name}",
        "parameters": null,
        "policy_violated": "Name or description of the policy violated",
        "violation_type": "boundary_violation|type_violation|format_violation|enum_violation|state_dependency_violation|resource_limit_violation|safety_violation|permission_violation|multi_parameter_conflict",
        "rationale": "Why this scenario violates policy and should be refused",
        "expected_response": "How the agent should refuse (briefly)"
      }}
    }}
  ]
}}
```

## Quality Guidelines

1. **Realistic Telecom Queries**: Write natural language that real telecom customers would say
   - Good: "I want to add another line to my family plan for my daughter"
   - Bad: "Call add_line with account_id=123"

2. **Specific to Target Parameter**: Focus violations on **{target_parameter}**
   - If testing "number_of_lines", make that the source of policy violation
   - Other parameters should be valid to isolate the test

3. **Plausible Telecom Violations**: Negative scenarios should seem reasonable
   - Good: "Add a 6th line to my account" (sounds ok, but violates max 5 lines)
   - Bad: "Add 100 lines" (obviously invalid, no one would ask)

4. **Diverse Violations**: Use different adversarial strategies across the {num_scenarios} pairs
   - Don't repeat the same violation type
   - Cover edge cases like exactly at boundary (5 vs 6 lines)

5. **Contrastive Learning**: Positive and negative should be similar except for the violation
   - Good pair: "Add 3rd line" (positive) vs "Add 6th line" (negative with max 5)
   - This helps the model learn the exact policy boundary

6. **Telecom Domain Knowledge**: Use realistic telecom context
   - Valid phone numbers, realistic plan types, common devices
   - Typical customer patterns and requests
   - Proper telecom terminology (data, roaming, ETF, IMEI)

7. **Complete Information**: Provide enough context for agent to act
   - Include account IDs, phone numbers, plan details
   - Don't make agent guess critical information

## Important Notes

- Generate EXACTLY {num_scenarios} scenario pairs
- Focus on testing **{target_parameter}** parameter
- Return ONLY valid JSON, no additional text
- Make user queries natural and conversational
- Ensure positive scenarios would actually succeed
- Ensure negative scenarios clearly violate a specific policy
- Use diverse adversarial strategies across scenarios
