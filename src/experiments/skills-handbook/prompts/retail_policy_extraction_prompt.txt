# Task: Extract Structured Policies from Retail Policy Document

You are an expert at analyzing retail policy documents and extracting structured constraints for API function calls.

## Input

### Policy Document
```
{policy_document}
```

### Available API Functions
```json
{api_spec}
```

## Your Task

Extract all policies from the retail policy document and map them to specific API functions and parameters. For each function, identify:

1. **Boundary Policies**: Numerical limits (e.g., "max 10 items per order", "minimum order value $25")
2. **Enum Policies**: Restricted values (e.g., order status, payment types, shipping methods)
3. **Format Policies**: Required formats (e.g., SKU formats, promo code patterns, phone numbers)
4. **Resource Limit Policies**: Inventory limits, discount limits, return windows
5. **State Dependency Policies**: Rules based on order state (e.g., "cannot cancel if already shipped")
6. **Safety Policies**: Security constraints (e.g., "credit cards must be verified")
7. **Permission Policies**: Authorization rules (e.g., "only premium members can use express shipping")
8. **Multi-Parameter Policies**: Rules involving multiple parameters (e.g., discount depends on order total + membership)
9. **Conditional Policies**: Rules under specific conditions (e.g., "returns allowed if within 30 days AND unworn")

## Retail-Specific Policies to Look For

### Order Placement Policies
- Item quantity limits
- Minimum/maximum order values
- Stock availability requirements
- Promo code restrictions
- Payment method constraints
- Shipping address validation

### Inventory & Stock Policies
- Stock level constraints
- Backorder rules
- Pre-order limitations
- Reserved item timeouts

### Pricing & Discount Policies
- Promo code validity periods
- Discount stacking rules
- Membership tier discounts
- Minimum purchase requirements for discounts
- Price matching policies

### Return & Exchange Policies
- Return window (e.g., 30 days)
- Item condition requirements (unworn, tags attached)
- Refund vs store credit rules
- Non-returnable items
- Restocking fees

### Shipping & Delivery Policies
- Shipping method availability by location
- Express shipping eligibility
- Free shipping thresholds
- Delivery date guarantees
- Address validation requirements

### Membership & Loyalty Policies
- Points earning rules
- Points redemption limits
- Membership tier benefits
- Tier upgrade/downgrade conditions

### Modification & Cancellation Policies
- Order modification deadlines
- Cancellation windows
- Partial cancellation rules
- Address change restrictions

## Output Format

Return a JSON object with the following structure:

```json
{{
  "api_name": "retail",
  "functions": [
    {{
      "name": "function_name",
      "policies": {{
        "parameter_name": [
          {{
            "type": "boundary|enum|format|resource_limit|state_dependency|safety|permission|multi_parameter|conditional",
            "description": "Human-readable description of the policy",
            "constraint": "Specific constraint details",
            "violation_examples": [
              "Example of what would violate this policy"
            ],
            "depends_on": ["other_parameter1", "other_parameter2"],
            "applies_when": "Condition under which this policy applies"
          }}
        ]
      }},
      "global_policies": [
        {{
          "type": "policy_type",
          "description": "Policies that affect the entire function call",
          "constraint": "Details",
          "violation_examples": ["Examples"]
        }}
      ]
    }}
  ],
  "cross_function_policies": [
    {{
      "description": "Policies that span multiple functions",
      "affected_functions": ["function1", "function2"],
      "constraint": "Details"
    }}
  ]
}}
```

## Important Guidelines

1. **Be Comprehensive**: Extract ALL retail policies, including orders, inventory, returns, discounts, and shipping
2. **Be Specific**: Map each policy to exact functions and parameters
3. **Include Context**: For complex policies (return windows, discount tiers), include full context
4. **Note Dependencies**: If policy depends on membership level, order status, etc., note those dependencies
5. **Provide Examples**: Include concrete violation examples for retail scenarios
6. **Handle Complexity**: Capture complex conditions (e.g., "return if 30 days AND unworn AND receipt")
7. **Agent Behavior**: Include policies about confirmation, escalation, and customer service

## Expected Output

Return ONLY the JSON object. Do not include any explanatory text before or after the JSON.
